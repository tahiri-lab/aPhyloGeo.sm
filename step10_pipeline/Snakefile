import pandas as pd
import subprocess
import yaml
import os
import shutil
import numpy as np
from csv import writer
from itertools import groupby


configfile: "config/config.yaml"

#----------------------------------------------------
if not os.path.exists("results/RAxML"):
    os.makedirs("results/RAxML")

if not os.path.exists("results/output.csv"):
    columns_name = ["window_pos","normalized_RF"]
    with open("results/output.csv", 'w') as f_object:
        writer_object = writer(f_object)
        writer_object.writerow(columns_name)
        f_object.close()
#-------------------------------

# global variable to use

alignment_output = config['params']['seq_file']
window_size = config['params']['window_size']
step_size = config['params']['step_size']

#---------------------------------------------
def slidingWindow(alignment_output, win=0, step=0):
    # Check if mutation happens
    windows_mutation = []

    seq_lt = []

    fin = open(alignment_output, 'rb')

    faiter = (x[1] for x in groupby(fin, lambda line: str(line, 'utf-8')[0] == ">"))
    for header in faiter:
        #headerStr = str(header.__next__(), 'utf-8')
        #long_name = headerStr.strip().replace('>', '')
        #name = long_name.split()[0]
        seq = "".join(str(s, 'utf-8').strip() for s in faiter.__next__())
        #print(name, seq, long_name)
        seq_lt.append(seq)

    nt = [list(str(seq)) for seq in seq_lt]

    #nt = [list(str(seq_record.seq)) for seq_record in SeqIO.parse(alignment_output, "fasta")]
    seqDF = pd.DataFrame(nt)
    seqlen = seqDF.shape[1]
    for i in range(0,seqlen,step):
        j = seqlen if i+win>seqlen else i+win
        window = seqDF.iloc[:,i:j]
        window = window.replace('-', np.nan)
        window = window.dropna(axis = 0, how = 'all')
        distinctDF = window.drop_duplicates()
        #mutation happens
        if distinctDF.shape[0] > 1: 
            windows_mutation.append(str(i)+'_'+str(j))
        if j==seqlen: break
    return windows_mutation


POS = slidingWindow(alignment_output, window_size, step_size)



rule all:
    input: expand("results/rf/{position}.rf_ete",position = POS)


rule sliding_windows:
    output: 
        windows = "results/windows/window_position_{position}.fa"
    params: 
        alignment_output = config['params']['seq_file']
    script: 
        "scripts/slidingWindows.py" 

#----------------------RaxML-NG-------------------------------------
rule runRaxML:
    input: "results/windows/window_position_{position}.fa"
    output: 
            temp("results/RAxML/{position}.raxml.bestModel"),
            "results/RAxML/{position}.raxml.bestTree",
            temp("results/RAxML/{position}.raxml.bootstraps"),
            temp("results/RAxML/{position}.raxml.log"),
            temp("results/RAxML/{position}.raxml.mlTrees"),
            temp("results/RAxML/{position}.raxml.rba"),
            temp("results/RAxML/{position}.raxml.startTree"),
            temp("results/RAxML/{position}.raxml.support")
    script: "scripts/runRaxMl.py"

rule rf_distance:
    input: 
        seq_tree = "results/RAxML/{position}.raxml.bestTree"
    params:
        ref_tree = "refTree/hostTree.newick"
    output: 
        ete3_output = "results/rf/{position}.rf_ete"
    script: "scripts/RFCal.py"